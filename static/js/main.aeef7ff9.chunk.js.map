{"version":3,"sources":["components/Instructions.js","components/Inputs.js","components/Ouput.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","className","Inputs","calculateTip","useState","total","setTotal","tip","setTip","id","onChange","e","Number","target","value","onClick","alert","Ouput","data","newKey","billTotal","setBillTotal","useEffect","console","log","App","setData","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mMAWeA,EATM,WACnB,OACE,yBAAKC,UAAU,gBACb,qEACA,8KCmDSC,MAvDf,YAAmC,IAAjBC,EAAgB,EAAhBA,aAAgB,EAENC,mBAAS,GAFH,mBAEzBC,EAFyB,KAElBC,EAFkB,OAGVF,mBAAS,GAHC,mBAGzBG,EAHyB,KAGpBC,EAHoB,KAqBhC,OACE,6BACE,+BACE,+BACE,4BACE,8CACA,wCAGJ,+BACE,4BACE,0CACA,4BACE,mCACA,2BAAOC,GAAG,QAAQC,SA9BJ,SAACC,GACzBL,EAASM,OAAOD,EAAEE,OAAOC,aAgCnB,4BACE,0CACA,4BACE,2BAAOJ,SAhCK,SAACC,GACvBH,EAAOI,OAAOD,EAAEE,OAAOC,WAgCb,qCAGJ,4BACE,6BACA,4BAAI,4BAAQC,QAlCF,WACdV,EAAQ,GAAKE,EAAM,EACrBS,MAAM,sDAENb,EAAaE,EAAOE,KA8BV,mBChBDU,G,MA9BD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAkB,KAAZC,OAEEf,mBAASc,EAAKX,MAFJ,mBAEzBA,EAFyB,KAEpBC,EAFoB,OAGEJ,mBAASc,EAAKE,WAHhB,mBAGzBA,EAHyB,KAGdC,EAHc,KAYhC,OAPAC,qBAAU,WACRd,EAAOU,EAAKX,KACZc,EAAaH,EAAKE,WAClBG,QAAQC,IAAIN,KACX,CAACA,IAIF,6BACE,+BACE,+BACE,4BACE,mDACA,gCAAMX,IAER,4BACE,4DACA,gCAAMa,S,OCkBHK,MArCf,WAAgB,IAAD,EAEarB,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,OAGSF,mBAAS,GAHlB,mBAGNG,EAHM,KAGDC,EAHC,OAIWJ,mBAAS,CAC/BC,MAAO,EACPE,IAAK,EACLa,UAAW,IAPA,mBAINF,EAJM,KAIAQ,EAJA,KA4Bb,OAXAJ,qBAAU,WACRI,EAAQ,eACHR,EADE,CAELb,QACAE,KAAMF,EAAQE,GAAKoB,QAAQ,GAC3BP,WAAYf,GAAS,EAAIE,IAAMoB,QAAQ,QAGxC,CAACtB,EAAOE,IAIT,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQE,aAnBS,SAACE,EAAOE,GAC3BD,EAASD,GACTG,EAAOD,EAAI,QAkBT,kBAAC,EAAD,CAAQW,KAAMA,MC1BAU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.aeef7ff9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Instructions = () => {\n  return (\n    <div className='instructions'>\n      <h2>Welcome to suggest the tip calculator</h2>\n      <p>this calculator will help you calculate the desired tip you should give to your waiter/waitress depending how generous you are feeling today!</p>\n    </div>\n  )\n}\n\nexport default Instructions\n","import React, { useState } from 'react'\n\nfunction Inputs({ calculateTip }) {\n\n  const [total, setTotal] = useState(0);\n  const [tip, setTip] = useState(0);\n\n  const handleChangeTotal = (e) => {\n    setTotal(Number(e.target.value));\n  }\n\n  const handleChangeTip = (e) => {\n    setTip(Number(e.target.value));\n  }\n\n  const handleClick = () => {\n    if (total < 0 || tip < 0) {\n      alert(\"Input has to be a number and it can't be negative!\")\n    } else {\n      calculateTip(total, tip);\n    }\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Tip Calculator</th>\n            <th>Inputs</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Total bill</td>\n            <td>\n              <span>$</span>\n              <input id=\"total\" onChange={handleChangeTotal}></input>\n            </td>\n          </tr>\n          <tr>\n            <td>Tip amount</td>\n            <td>\n              <input onChange={handleChangeTip}></input>\n              <span>%</span>\n            </td>\n          </tr>\n          <tr>\n            <td></td>\n            <td><button onClick={handleClick}>calculate</button></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Inputs\n","import React, { useState, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst Ouput = ({data, newKey}) => {\n\n  const [tip, setTip] = useState(data.tip);\n  const [billTotal, setBillTotal] = useState(data.billTotal);\n\n  useEffect(() => {\n    setTip(data.tip);\n    setBillTotal(data.billTotal);\n    console.log(data);\n  }, [data])\n\n\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <td>Your tip amount is:</td>\n            <td>${tip}</td>\n          </tr>\n          <tr>\n            <td>Your have to pay a total of:</td>\n            <td>${billTotal}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Ouput\n","import React, { useState, useEffect } from 'react';\nimport Instructions from './components/Instructions';\nimport Inputs from './components/Inputs';\nimport Output from './components/Ouput'\nimport './app.css';\n\nfunction App() {\n\n  const [total, setTotal] = useState(0);\n  const [tip, setTip] = useState(0);\n  const [data, setData] = useState({\n    total: 0,\n    tip: 0,\n    billTotal: 0\n  });\n\n\n\n  const calculateTip = (total, tip) => {\n    setTotal(total);\n    setTip(tip/100);\n  }\n\n  useEffect(() => {\n    setData({ \n      ...data, \n      total, \n      tip: (total * tip).toFixed(2), \n      billTotal: (total * (1 + tip)).toFixed(2)\n    });\n\n  }, [total, tip]);\n\n\n  return (\n    <div className='app'>\n      <Instructions/>\n      <Inputs calculateTip={calculateTip}/>\n      <Output data={data}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}